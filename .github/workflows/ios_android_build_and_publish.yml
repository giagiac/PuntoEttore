name: App build
on:
  push:
jobs:
  build_with_signing:
    runs-on: macos-14
    environment: IOS_ANDROID_PUBLISH_V1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: decrypt archive
        env:
          SYMMETRIC_KEYFILE_BASE64: ${{ secrets.SYMMETRIC_KEYFILE_BASE64 }}
        run: |
          cd "$GITHUB_WORKSPACE"/.github/workflows
          echo -n $SYMMETRIC_KEYFILE_BASE64 | base64 --decode -o ./symmetric_keyfile.key
          ls -al
          chmod +x ./decompress.sh
          ./decompress.sh

      - name: List files in the repository
        run: |
          cd "$GITHUB_WORKSPACE"
          ls -al ../          

      - name: Build Release apk with Gradle
        run: |
          ./gradlew assembleRelease

      - name: Get Android App Name With Version semantics
        run: |
          appName=$(./gradlew -q getAppName Release | tail -n 1)
          echo "APP_NAME=${appName}" >> $GITHUB_ENV
          echo "APK_PATH=composeApp/build/outputs/apk/release/${appName}.apk" >> $GITHUB_ENV
          echo $$GITHUB_ENV

      - name: Rename APK
        run: |
          mv composeApp/build/outputs/apk/release/composeApp-release.apk ${{ env.APK_PATH }}

#      - name: Carica l'artefatto
#        uses: actions/upload-artifact@v4
#        with:
#          name: $APP_NAME # Nome dell'artefatto
#          path: ${{ env.APK_PATH }} # Percorso del file da caricare

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.APP_NAME }}
          release_name: Automatic Release
          draft: false
          prerelease: false

      - name: Carica file nella Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.APK_PATH }} # Percorso del file DA CARICARE
          asset_name: ${{ env.APP_NAME }} # Nome del file nella release
          asset_content_type: application/zip # Tipo MIME del file (importante!)

      - name: Build Release Android app bundle with Gradle
        run: ./gradlew bundleRelease

#      - name: Build for ios...
#        run: ./gradlew iosArm64MainBinaries
#
#        # IOS
#
#      - name: Install the Apple certificate and provisioning profile
#        env:
#          IOS_BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
#          IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
#          IOS_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_BUILD_PROVISION_PROFILE_BASE64 }}
#          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/ProvisionProfile.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate, provisioning profile and apikey from secrets
#          echo -n "$IOS_BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#          echo -n "$IOS_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#          ls $PP_PATH
#          # echo -n "$APPSTORE_CONNECT_API_KEY_BASE64" | base64 --decode -o ~/private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#
#          security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
#          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
#          security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
#          security import "$CERTIFICATE_PATH" -P "$IOS_P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
#          security set-key-partition-list -S apple-tool:,apple: -k "$IOS_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
#          security list-keychain -d user -s "$KEYCHAIN_PATH"
#          security default-keychain -s "$KEYCHAIN_PATH"
#
#      - name: Build iOSApp archive
#        run: |
#          xcodebuild -allowProvisioningUpdates -project iosApp/iosApp.xcodeproj \
#            -scheme iosApp \
#            -sdk iphoneos \
#            -archivePath $RUNNER_TEMP/iosApp.xcarchive \
#            -configuration Release \
#            -destination generic/platform=iOS \
#            clean archive
#
#      - name: Export iosApp ipa file
#        env:
#          IOS_EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.IOS_EXPORT_OPTIONS_PLIST_BASE64 }}
#          IOS_APPSTORE_API_KEY_ID: ${{ secrets.IOS_APPSTORE_API_KEY_ID }}
#          IOS_APPSTORE_API_KEY_ISSUER_ID: ${{ secrets.IOS_APPSTORE_API_KEY_ISSUER_ID }}
#          AUTHENTICATION_KEY_BASE64: ${{ secrets.IOS_AUTHENTICATION_KEY_BASE64 }}
#        run: |
#          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#          echo -n "$IOS_EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode -o $EXPORT_OPTS_PATH
#          AUTHENTICATION_KEY_PATH=$RUNNER_TEMP/AuthKey.p8
#          echo -n "$AUTHENTICATION_KEY_BASE64" | base64 --decode -o $AUTHENTICATION_KEY_PATH
#          xcodebuild -allowProvisioningUpdates \
#            -exportArchive \
#            -archivePath $RUNNER_TEMP/iosApp.xcarchive \
#            -exportOptionsPlist $EXPORT_OPTS_PATH \
#            -exportPath $RUNNER_TEMP/build \
#            -authenticationKeyID $IOS_APPSTORE_API_KEY_ID \
#            -authenticationKeyIssuerID $IOS_APPSTORE_API_KEY_ISSUER_ID \
#            -authenticationKeyPath $AUTHENTICATION_KEY_PATH
#

#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          cd "$GITHUB_WORKSPACE"
#          rm -rf ../*
#          la -al ../