name: App build

permissions:
  contents: write

on:
  push:

jobs:
  build_with_signing:
    runs-on: macos-latest
    environment: IOS_ANDROID_PUBLISH_V1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: set up JDK 21
        uses: actions/setup-java@v4
        with:
         java-version: 21
         distribution: corretto
         cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: decrypt archive
        env:
          SYMMETRIC_KEYFILE_BASE64: ${{ secrets.SYMMETRIC_KEYFILE_BASE64 }}
        run: |
          cd "$GITHUB_WORKSPACE"/.github/workflows
          echo -n $SYMMETRIC_KEYFILE_BASE64 | base64 --decode -o ./symmetric_keyfile.key
          chmod +x ./decompress.sh
          ./decompress.sh

      - name: Move file manually
        run: |
          cp -r "$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd/composeApp "$GITHUB_WORKSPACE"/composeApp
          ls "$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd/composeApp/
          cp -r "$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd/iosApp/iosApp "$GITHUB_WORKSPACE"/iosApp/iosApp
          ls "$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd/iosApp/iosApp
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd/ProvisioningProfileDistributionPuntoEttoreFidelity.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
          ls ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install the Apple certificate and provisioning profile
        env:
          IOS_BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
          IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          # KEYCHAIN_PATH=$RUNNER_TEMP/login.keychain-db
          KEYCHAIN_PATH=~/Library/Keychains
          CA_PATH="$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd/AppleWWDRCAG3.cer

          # import certificate, provisioning profile and apikey from secrets
          echo -n "$IOS_BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          echo "ls KEYCHAIN_PATH"
          ls $KEYCHAIN_PATH
          echo "end KEYCHAIN_PATH"
          
          KEYCHAIN_PATH=~/Library/Keychains/login.keychain-db
          
          # security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          # security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security import "$CERTIFICATE_PATH" -P "$IOS_P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          
          # security add-trusted-cert -d -r trustAsRoot -k "$KEYCHAIN_PATH" "$CA_PATH"
          security find-identity -v -p codesigning
          
          # open "$GITHUB_WORKSPACE"/iosApp/iosApp.xcodeproj
          ./gradlew buildRelease

          echo "xcode version"
          xcodebuild -version
          # ls /Applications | grep Xcode
          # sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
          
          xcodebuild -allowProvisioningUpdates -project iosApp/iosApp.xcodeproj \
            -scheme PuntoEttore \
            -sdk iphoneos \
            -archivePath $RUNNER_TEMP/iosApp.xcarchive \
            -configuration Release \
            -destination generic/platform=iOS \
            -verbose \
            CODE_SIGN_IDENTITY="Apple Distribution: Helinext Srl (J87ZH9VBKQ)"
            clean archive

#      - name: Script Export Clean Archive
#        run: |
#          cd "$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd \
#          chmod +x export_clean_archive.sh
#          ./export_clean_archive.sh

      # - name: Clean Archive IOS
      #   run: |
      #     cd "$GITHUB_WORKSPACE"
      #     xcodebuild -allowProvisioningUpdates -project iosApp/iosApp.xcodeproj \
      #     -scheme PuntoEttore \
      #     -sdk iphoneos \
      #     -archivePath $RUNNER_TEMP/iosApp.xcarchive \
      #     -configuration Release \
      #     -destination generic/platform=iOS \
      #     clean archive
#          -verbose \

#      - name: Upload Archive IOS
#        run: |
#          cd "$GITHUB_WORKSPACE"/../PuntoEttoreExtraFilesProd \
#          chmod +x export_archive.sh
#          ./export_archive.sh

#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          cd "$GITHUB_WORKSPACE"
#          rm iosApp/iosApp/GoogleService-Info.plist
#          rm iosApp/iosApp/Info.plist
#          rm composeApp/google-services.json
